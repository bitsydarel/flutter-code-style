# Defines a default set of lint rules enforced for
# projects at Google. For details and rationale,
# see https://github.com/dart-lang/pedantic#enabled-lints.

# For lint rules and documentation, see http://dart-lang.github.io/linter/lints.
# Uncomment to specify additional rules.
linter:
  rules:
    # DESIGN
    - use_to_and_as_if_applicable # prefer
    - one_member_abstracts # avoid
    - avoid_classes_with_only_static_members # avoid
    - prefer_final_fields # prefer
    - use_setters_to_change_properties
    - avoid_setters_without_getters
    - avoid_returning_null # avoid
    - avoid_returning_this # avoid
    - prefer_typing_uninitialized_variables # prefer
    - omit_local_variable_types # avoid
    - avoid_return_types_on_setters
    - prefer_generic_function_type_aliases
    - avoid_private_typedef_functions
    - use_function_type_syntax_for_parameters # consider
    - avoid_positional_boolean_parameters # avoid
    - hash_and_equals
    - avoid_null_checks_in_equality_operators
    - avoid_types_as_parameter_names
    # USAGE
    - avoid_relative_lib_imports # prefer
    - prefer_adjacent_string_concatenation
    - prefer_interpolation_to_compose_strings # prefer
    - unnecessary_brace_in_string_interps # avoid
    - prefer_collection_literals
    - avoid_function_literals_in_foreach_calls # avoid
    - prefer_iterable_whereType
    - prefer_function_declarations_over_variables
    - unnecessary_lambdas
    - prefer_equal_for_default_values
    - avoid_init_to_null
    - unnecessary_getters_setters
    - unnecessary_getters # prefer
    - unnecessary_new
    #- prefer_expression_function_bodies # consider
    - unnecessary_this
    - prefer_initializing_formals
    - type_init_formals
    - empty_constructor_bodies
    - unnecessary_const
    - avoid_catches_without_on_clauses # avoid
    - use_rethrow_when_possible
    - implementation_imports
    - avoid_empty_else
    - avoid_slow_async_io
    - cancel_subscriptions
    - prefer_contains
    - close_sinks
    - invariant_booleans
    - iterable_contains_unrelated_type
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_duplicate_case_values
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_statements
    - unrelated_type_equality_checks
    - dead_code
    - unused_import
    - unused_element
    - unused_local_variable
    # STYLE
    - camel_case_types
    - library_names
    - file_names
    - library_prefixes
    - non_constant_identifier_names
    - constant_identifier_names # prefer
    - directives_ordering
    - lines_longer_than_80_chars # avoid
    - curly_braces_in_flow_control_structures
    - always_declare_return_types
    - always_put_required_named_parameters_first
    - always_require_non_null_named_parameters
    - annotate_overrides
    - avoid_bool_literals_in_conditional_expressions
    - avoid_field_initializers_in_const_classes
    - avoid_renaming_method_parameters
    - await_only_futures
    - cascade_invocations
    - join_return_with_assignment
    - overridden_fields
    - prefer_const_constructors_in_immutables
    - prefer_const_constructors
    - prefer_conditional_assignment
    - prefer_asserts_with_message
    - prefer_asserts_in_initializer_lists
    - prefer_double_quotes
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_for_elements_to_map_fromIterable
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_mixin
    - prefer_null_aware_operators
    - prefer_spread_collections
    - provide_deprecation_message
    - recursive_getters
    - sort_child_properties_last
    - sort_constructors_first
    - type_annotate_public_apis
    - unnecessary_await_in_return
    - unnecessary_null_aware_assignments
    - unnecessary_null_in_if_null_operators
    - unnecessary_overrides
    - unnecessary_parenthesis
    - use_full_hex_values_for_flutter_colors
    - use_string_buffers
    # DOCUMENTATION
    - slash_for_doc_comments
    - package_api_docs # prefer
    - public_member_api_docs # prefer
    - comment_references

analyzer:
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  errors:
    slash_for_doc_comments: warning
    package_api_docs: error
    public_member_api_docs: error
    camel_case_types: warning
    library_names: error
    file_names: error
    library_prefixes: warning
    non_constant_identifier_names: warning
    directives_ordering: warning
    lines_longer_than_80_chars: warning
    curly_braces_in_flow_control_structures: error
    always_require_non_null_named_parameters: error
    avoid_renaming_method_parameters: warning
    await_only_futures: warning
    cascade_invocations: warning
    prefer_const_constructors_in_immutables: error
    prefer_asserts_in_initializer_lists: warning
    prefer_if_elements_to_conditional_expressions: warning
    use_to_and_as_if_applicable: warning
    one_member_abstracts: warning
    prefer_final_fields: warning
    avoid_setters_without_getters: error
    prefer_generic_function_type_aliases: error
    avoid_private_typedef_functions: warning
    avoid_positional_boolean_parameters: warning
    hash_and_equals: error
    avoid_null_checks_in_equality_operators: warning
    prefer_interpolation_to_compose_strings: warning
    unnecessary_brace_in_string_interps: warning
    prefer_iterable_whereType: warning
    unnecessary_lambdas: warning
    prefer_equal_for_default_values: warning
    avoid_init_to_null: warning
    unnecessary_this: warning
    prefer_initializing_formals: warning
    type_init_formals: warning
    empty_constructor_bodies: warning
    implementation_imports: error
    unnecessary_const: warning
    avoid_catches_without_on_clauses: warning
    use_rethrow_when_possible: warning
    dead_code: error
    unused_import: error
    unused_element: error
    unused_local_variable: error
#   exclude:
#     - path/to/excluded/files/**
